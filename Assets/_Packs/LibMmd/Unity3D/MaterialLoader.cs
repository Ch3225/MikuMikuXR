// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Text;
using LibMMD.Material;
using UnityEngine;

namespace LibMMD.Unity3D
{
	public class MaterialLoader : IDisposable
	{
		
		private readonly TextureLoader _textureLoader;

		public MaterialLoader(TextureLoader textureLoader) {
			_textureLoader = textureLoader;
		}

		public UnityEngine.Material LoadMaterial(MmdMaterial mmdMaterial, MmdUnityConfig config) {
			var mainTexture = _textureLoader.LoadTexture(mmdMaterial.Texture);
			var material = new UnityEngine.Material(GetShader(mmdMaterial, config, false));
			// 设置材质名为PMX原始材质名，方便调试
			if (!string.IsNullOrEmpty(mmdMaterial.Name))
				material.name = mmdMaterial.Name;
			else
				material.name = "MMDMaterial";
			ConfigMaterial(mmdMaterial, config, material, mainTexture);
			return material;
		}
		public void RefreshMaterialConfig(MmdMaterial mmdMaterial, MmdUnityConfig config, UnityEngine.Material material)
		{
			var mainTexture = _textureLoader.LoadTexture(mmdMaterial.Texture);
			ConfigMaterial(mmdMaterial, config, material, mainTexture);
		}
		
		private void ConfigMaterial(MmdMaterial mmdMaterial, MmdUnityConfig config, UnityEngine.Material material, Texture mainTexture)
		{
			// 设置默认值，防止全黑/全透明
			var diffuse = mmdMaterial.DiffuseColor;
			var ambient = mmdMaterial.AmbientColor;
			var specular = mmdMaterial.SpecularColor;
			var edgeColor = mmdMaterial.EdgeColor;
			float alpha = diffuse.a > 0 ? diffuse.a : 1.0f;
			float specularStrength = 5.0f;
			float edgeWidth = mmdMaterial.EdgeSize > 0 ? mmdMaterial.EdgeSize : 0.0f;

			material.SetColor("_Color_DiffuseColor", diffuse);
			material.SetColor("_Color_SpecularColor", specular);
			material.SetFloat("_Float_SpecularStrength", specularStrength);
			material.SetColor("_Color_AmbientColor", ambient);
			material.SetColor("_Color_EdgeColor", edgeColor);
			material.SetFloat("_Float_EdgeWidth", edgeWidth);
			material.SetFloat("_Float_Alpha", alpha);
			material.SetInt("_Boolean_DoubleSided", mmdMaterial.DrawDoubleFace ? 1 : 0);
			material.SetInt("_Boolean_SelfShadow", mmdMaterial.DrawSelfShadow ? 1 : 0);
			if (mainTexture != null)
			{
				material.SetTexture("_Texture2D_MainTex", mainTexture);
			}
			var toonTexture = _textureLoader.LoadTexture(mmdMaterial.Toon);
			if (toonTexture != null)
			{
				material.SetTexture("_Texture2D_Toon", toonTexture);
			}
			// 只用一个SphereMap槽，Spa/Sph都塞进去
			if (mmdMaterial.SubTextureType != MmdMaterial.SubTextureTypeEnum.MatSubTexOff)
			{
				var additionalTexture = mmdMaterial.SubTexture == null ? null : _textureLoader.LoadTexture(mmdMaterial.SubTexture);
				if (additionalTexture != null)
				{
					material.SetTexture("_Texture2D_SphereMap", additionalTexture);
				}
			}
			// 传递SphereMap用法到shader
			switch (mmdMaterial.SubTextureType)
			{
				case MmdMaterial.SubTextureTypeEnum.MatSubTexOff:
					material.SetInt("_Boolean_MatSubTexOff", 1);
					material.SetInt("_Boolean_MatSubTexSph", 0);
					material.SetInt("_Boolean_MatSubTexSpa", 0);
					material.SetInt("_Boolean_MatSubTexSub", 0);
					break;
				case MmdMaterial.SubTextureTypeEnum.MatSubTexSph:
					material.SetInt("_Boolean_MatSubTexOff", 0);
					material.SetInt("_Boolean_MatSubTexSph", 1);
					material.SetInt("_Boolean_MatSubTexSpa", 0);
					material.SetInt("_Boolean_MatSubTexSub", 0);
					break;
				case MmdMaterial.SubTextureTypeEnum.MatSubTexSpa:
					material.SetInt("_Boolean_MatSubTexOff", 0);
					material.SetInt("_Boolean_MatSubTexSph", 0);
					material.SetInt("_Boolean_MatSubTexSpa", 1);
					material.SetInt("_Boolean_MatSubTexSub", 0);
					break;
				case MmdMaterial.SubTextureTypeEnum.MatSubTexSub:
					material.SetInt("_Boolean_MatSubTexOff", 0);
					material.SetInt("_Boolean_MatSubTexSph", 0);
					material.SetInt("_Boolean_MatSubTexSpa", 0);
					material.SetInt("_Boolean_MatSubTexSub", 1);
					break;
				default:
					Debug.LogWarning("Unknown SubTextureType: " + mmdMaterial.SubTextureType);
					break;
			}
		}

		private void RefreshShaderKeywords(MmdMaterial mmdMaterial, MmdUnityConfig config, UnityEngine.Material material)
		{
			RefreshDrawSelfShadowKeyword(MmdUnityConfig.DealSwitch(config.EnableDrawSelfShadow, mmdMaterial.DrawSelfShadow),
				material);
		}

		private void RefreshDrawSelfShadowKeyword(bool drawSelfshadow, UnityEngine.Material material)
		{
			if (drawSelfshadow)
			{
				material.EnableKeyword("SELFSHADOW_ON");
				material.DisableKeyword("SELFSHADOW_OFF");
			}
			else
			{
				material.DisableKeyword("SELFSHADOW_ON");
				material.EnableKeyword("SELFSHADOW_OFF");
			}
		}
			
		public void Dispose ()
		{
			if (_textureLoader != null) {
				_textureLoader.Dispose ();
			}
		}
			
		private static Shader GetShader(MmdMaterial mmdMaterial, MmdUnityConfig config, bool isTransparent)
		{
			// 强制使用HDRP MMDUnlitShader
			var ret = Shader.Find("Shader Graphs/MMDUnlitShader");
			if (ret == null)
			{
				Debug.LogWarning("Can't find shader Shader Graphs/MMDLitShader");
			}
			return ret;
		}

		private static string BuildShaderName(MmdMaterial mmdMaterial, MmdUnityConfig config, bool isTransparent)
		{
			var shaderNameBuilder = new StringBuilder();
			shaderNameBuilder.Append("MMD/");
			if (isTransparent)
			{
				shaderNameBuilder.Append("Transparent/");
			}
			shaderNameBuilder.Append("PMDMaterial");
			if (MmdUnityConfig.DealSwitch(config.EnableEdge, mmdMaterial.DrawEdge))
			{
				shaderNameBuilder.Append("-with-Outline");
			}
			if (!mmdMaterial.DrawDoubleFace)
			{
				shaderNameBuilder.Append("-CullBack");
			}
			if (!MmdUnityConfig.DealSwitch(config.EnableCastShadow, mmdMaterial.CastSelfShadow))
			{
				shaderNameBuilder.Append("-NoCastShadow");
			}
			var shaderName = shaderNameBuilder.ToString();
			return shaderName;
		}

		private static bool IsTextireTransparent(Texture texture) {
			try {
				var tex2D = texture as Texture2D;
				if (tex2D == null) {
					return false;
				}
				var pixels = tex2D.GetPixels ();
				foreach (var color in pixels) {
					if (color.a < 0.99f) {
						return true;
					}
				}
			} catch {
				
			}
			return false;
		}
	}
		
}

